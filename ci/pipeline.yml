---
groups:
- name: all
  jobs:
  - deploy-shibboleth-development
  - deploy-shibboleth-staging
  - deploy-shibboleth-production
- name: development
  jobs:
  - deploy-shibboleth-development
- name: staging
  jobs:
  - deploy-shibboleth-staging
- name: production
  jobs:
  - deploy-shibboleth-production

jobs:

- name: deploy-shibboleth-development
  plan:
  - in_parallel:
    - get: pipeline-tasks
      params: {depth: 1}
    - get: shibboleth-deployment-src
      trigger: true
      params: {depth: 1}
    - get: terraform-yaml
      resource: terraform-yaml-development
    - get: cg-s3-shibboleth-release
      trigger: true
    - get: secureproxy-release
      trigger: true
    - get: shibboleth-stemcell-jammy
      trigger: true
  - put: shibboleth-development-deployment
    params:
      manifest: shibboleth-deployment-src/bosh/manifest.yml
      vars_files:
      - terraform-yaml/state.yml
      - shibboleth-deployment-src/bosh/varsfiles/development.yml
      releases:
      - cg-s3-shibboleth-release/*.tgz
      - secureproxy-release/*.tgz
      stemcells:
      - shibboleth-stemcell-jammy/*.tgz
  - task: acceptance-tests
    file: shibboleth-deployment-src/ci/acceptance_tests.yml
    params:
        UAA_USER: ((uaa-user))
        UAA_SECRET: ((uaa-client-secret-development))
        UAA_URL: ((uaa-base-url-development))
        IDP_URL: ((idp-base-url-development))
        UAA_TARGET: ((uaa-target-url-development))
        EXTRAS_URL: ((uaa-extras-url-development))
        IDP_NAME: ((idp-provider-origin-development))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy shibboleth in development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed shibboleth in development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-shibboleth-staging
  plan:
  - in_parallel:
    - get: pipeline-tasks
      params: {depth: 1}
    - get: shibboleth-deployment-src
      trigger: true
      passed: [deploy-shibboleth-development]
      params: {depth: 1}
    - get: terraform-yaml
      resource: terraform-yaml-staging
    - get: cg-s3-shibboleth-release
      trigger: true
      passed: [deploy-shibboleth-development]
    - get: secureproxy-release
      trigger: true
      passed: [deploy-shibboleth-development]
    - get: shibboleth-stemcell-jammy
      trigger: true
      passed: [deploy-shibboleth-development]
  - put: shibboleth-staging-deployment
    params:
      manifest: shibboleth-deployment-src/bosh/manifest.yml
      vars_files:
      - terraform-yaml/state.yml
      - shibboleth-deployment-src/bosh/varsfiles/staging.yml
      releases:
      - cg-s3-shibboleth-release/*.tgz
      - secureproxy-release/*.tgz
      stemcells:
      - shibboleth-stemcell-jammy/*.tgz
  - task: acceptance-tests
    file: shibboleth-deployment-src/ci/acceptance_tests.yml
    params:
        UAA_USER: ((uaa-user))
        UAA_SECRET: ((uaa-client-secret-staging))
        UAA_URL: ((uaa-base-url-staging))
        IDP_URL: ((idp-base-url-staging))
        UAA_TARGET: ((uaa-target-url-staging))
        EXTRAS_URL: ((uaa-extras-url-staging))
        IDP_NAME: ((idp-provider-origin-staging))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy shibboleth on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed shibboleth on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-shibboleth-production
  plan:
  - in_parallel:
    - get: pipeline-tasks
      params: {depth: 1}
    - get: shibboleth-deployment-src
      trigger: true
      passed: [deploy-shibboleth-staging]
      params: {depth: 1}
    - get: terraform-yaml
      resource: terraform-yaml-production
    - get: cg-s3-shibboleth-release
      trigger: true
      passed: [deploy-shibboleth-staging]
    - get: secureproxy-release
      trigger: true
      passed: [deploy-shibboleth-staging]
    - get: shibboleth-stemcell-jammy
      trigger: true
      passed: [deploy-shibboleth-staging]
  - put: shibboleth-production-deployment
    params:
      manifest: shibboleth-deployment-src/bosh/manifest.yml
      vars_files:
      - terraform-yaml/state.yml
      - shibboleth-deployment-src/bosh/varsfiles/production.yml
      releases:
      - cg-s3-shibboleth-release/*.tgz
      - secureproxy-release/*.tgz
      stemcells:
      - shibboleth-stemcell-jammy/*.tgz
  - task: acceptance-tests
    file: shibboleth-deployment-src/ci/acceptance_tests.yml
    params:
        UAA_USER: ((uaa-user))
        UAA_SECRET: ((uaa-client-secret-production))
        UAA_URL: ((uaa-base-url-production))
        IDP_URL: ((idp-base-url-production))
        UAA_TARGET: ((uaa-target-url-production))
        EXTRAS_URL: ((uaa-extras-url-production))
        IDP_NAME: ((idp-provider-origin-production))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy shibboleth on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel-fatal-error))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed shibboleth on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: '#cg-platform-news'
      username: ((slack-username))
      icon_url: ((slack-icon-url))

resources:
- name: pipeline-tasks
  type: git
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: shibboleth-deployment-src
  type: git
  source:
    uri: ((cg-deploy-shibboleth-git-url))
    branch: ((cg-deploy-shibboleth-git-branch))
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: shibboleth-stemcell-jammy
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-jammy-go_agent

- name: cg-s3-shibboleth-release
  type: s3-iam
  source: &s3-release-params
    bucket: ((s3-bosh-releases-bucket))
    region_name: ((aws-region))
    private: true
    regexp: shibboleth-(.*).tgz

- name: secureproxy-release
  type: s3-iam
  source:
    <<: *s3-release-params
    regexp: secureproxy-(.*).tgz

- name: shibboleth-development-deployment
  type: bosh-deployment
  source:
    target: ((shibboleth-development-deployment-bosh-target))
    client: ((shibboleth-development-deployment-bosh-client-id))
    client_secret: ((shibboleth-development-deployment-bosh-client-passphrase))
    deployment: ((shibboleth-development-deployment-bosh-deployment))
    ca_cert: ((bosh-ca-cert))

- name: shibboleth-staging-deployment
  type: bosh-deployment
  source:
    target: ((shibboleth-staging-deployment-bosh-target))
    client: ((shibboleth-staging-deployment-bosh-client-id))
    client_secret: ((shibboleth-staging-deployment-bosh-client-passphrase))
    deployment: ((shibboleth-staging-deployment-bosh-deployment))
    ca_cert: ((bosh-ca-cert))

- name: shibboleth-production-deployment
  type: bosh-deployment
  source:
    target: ((shibboleth-production-deployment-bosh-target))
    client: ((shibboleth-production-deployment-bosh-client-id))
    client_secret: ((shibboleth-production-deployment-bosh-client-passphrase))
    deployment: ((shibboleth-production-deployment-bosh-deployment))
    ca_cert: ((bosh-ca-cert))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-development))
    region_name: ((aws-region))

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-staging))
    region_name: ((aws-region))

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-production))
    region_name: ((aws-region))

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
